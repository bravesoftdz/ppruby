
var
  USE_FLONUM : Boolean;

var
  RUBY_LIB : UnicodeString;

var
  Qfalse : VALUE;
  Qtrue  : VALUE;
  Qnil   : VALUE;
  Qundef : VALUE;

var
  rb_cArray         : VALUE;
  rb_cBasicObject   : VALUE;
  rb_cBignum        : VALUE;
  rb_cBinding       : VALUE;
  rb_cClass         : VALUE;
  rb_cComplex       : VALUE;
  rb_cData          : VALUE;
  rb_cDir           : VALUE;
  rb_cEncoding      : VALUE;
  rb_cEnumerator    : VALUE;
  rb_cEnv           : VALUE;
  rb_cFalseClass    : VALUE;
  rb_cFile          : VALUE;
  rb_cFixnum        : VALUE;
  rb_cFloat         : VALUE;
  rb_cHash          : VALUE;
  rb_cInteger       : VALUE;
  rb_cIO            : VALUE;
  rb_cISeq          : VALUE;
  rb_cMatch         : VALUE;
  rb_cMethod        : VALUE;
  rb_cModule        : VALUE;
  rb_cNameErrorMesg : VALUE;
  rb_cNilClass      : VALUE;
  rb_cNumeric       : VALUE;
  rb_cObject        : VALUE;
  rb_cProc          : VALUE;
  rb_cRandom        : VALUE;
  rb_cRange         : VALUE;
  rb_cRational      : VALUE;
  rb_cRegexp        : VALUE;
  rb_cRubyVM        : VALUE;
  rb_cStat          : VALUE;
  rb_cString        : VALUE;
  rb_cStruct        : VALUE;
  rb_cSymbol        : VALUE;
  rb_cThread        : VALUE;
  rb_cTime          : VALUE;
  rb_cTrueClass     : VALUE;
  rb_cUnboundMethod : VALUE;
  rb_eArgError         : VALUE;
  rb_eEncCompatError   : VALUE;
  rb_eEncodingError    : VALUE;
  rb_eEOFError         : VALUE;
  rb_eException        : VALUE;
  rb_eFatal            : VALUE;
  rb_eFloatDomainError : VALUE;
  rb_eIndexError       : VALUE;
  rb_eInterrupt        : VALUE;
  rb_eIOError          : VALUE;
  rb_eKeyError         : VALUE;
  rb_eLoadError        : VALUE;
  rb_eLocalJumpError   : VALUE;
  rb_eMathDomainError  : VALUE;
  rb_eNameError        : VALUE;
  rb_eNoMemError       : VALUE;
  rb_eNoMethodError    : VALUE;
  rb_eNotImpError      : VALUE;
  rb_eRangeError       : VALUE;
  rb_eRegexpError      : VALUE;
  rb_eRuntimeError     : VALUE;
  rb_eScriptError      : VALUE;
  rb_eSecurityError    : VALUE;
  rb_eSignal           : VALUE;
  rb_eStandardError    : VALUE;
  rb_eStopIteration    : VALUE;
  rb_eSyntaxError      : VALUE;
  rb_eSysStackError    : VALUE;
  rb_eSystemCallError  : VALUE;
  rb_eSystemExit       : VALUE;
  rb_eThreadError      : VALUE;
  rb_eTypeError        : VALUE;
  rb_eZeroDivError     : VALUE;
  rb_mComparable       : VALUE;
  rb_mEnumerable       : VALUE;
  rb_mErrno            : VALUE;
  rb_mFileTest         : VALUE;
  rb_mGC               : VALUE;
  rb_mKernel           : VALUE;
  rb_mMath             : VALUE;
  rb_mProcess          : VALUE;
  rb_mRubyVMFrozenCore : VALUE;
  rb_mWaitReadable     : VALUE;
  rb_mWaitWritable     : VALUE;
  rb_argv0 : VALUE;
  rb_default_rs : VALUE;
  rb_fs : VALUE;
  rb_output_fs : VALUE;
  rb_output_rs : VALUE;
  rb_rs : VALUE;

  ruby_api_version : array [0..2] of cint;
  ruby_patchlevel : cint;

var
  p_ruby_copyright    : PChar;
  p_ruby_description  : PChar;
  p_ruby_engine       : PChar;
  p_ruby_platform     : PChar;
  p_ruby_release_date : PChar;
  p_ruby_version      : PChar;

  p_stderr : PVALUE;
  p_stdin  : PVALUE;
  p_stdout : PVALUE;

var
  rb_add_event_hook : procedure (func : rb_event_hook_func_t; evets : rb_event_flag_t; data : VALUE); cdecl;
  rb_alias : procedure (klass : VALUE; name, def : ID); cdecl;
  rb_alias_variable : procedure (name1, name2 : ID); cdecl;
  rb_alloc_tmp_buffer : function (store : PVALUE; len : clong) : Pointer; cdecl;
  rb_any_to_s : function (obj : VALUE) : VALUE; cdecl;
  rb_apply : function (recv : VALUE; mid : ID; args : VALUE) : VALUE; cdecl;
  rb_Array : function (val : VALUE) : VALUE; cdecl;
  rb_ary_aref : function (argc : cint; argv : PVALUE; ary : VALUE) : VALUE; cdecl;
  rb_ary_assoc : function (ary, key : VALUE) : VALUE; cdecl;
  rb_ary_clear : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_cmp : function (ary1, ary2 : VALUE) : VALUE; cdecl;
  rb_ary_concat : function (x, y : VALUE) : VALUE; cdecl;
  rb_ary_delete : function (ary, item : VALUE) : VALUE; cdecl;
  rb_ary_delete_at : function (ary : VALUE; pos : clong) : VALUE; cdecl;
  rb_ary_dup : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_each : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_entry : function (ary : VALUE; offset : clong) : VALUE; cdecl;
  rb_ary_free : procedure (ary : VALUE); cdecl;
  rb_ary_freeze : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_includes : function (ary, item : VALUE) : VALUE; cdecl;
  rb_ary_join : function (ary, sep : VALUE) : VALUE; cdecl;
  rb_ary_memsize : function (ary : VALUE) : csize_t; cdecl;
  rb_ary_modify : procedure (ary : VALUE); cdecl;
  rb_ary_new : function () : VALUE; cdecl;
  rb_ary_new2 : function (capa : clong) : VALUE; cdecl;
  rb_ary_new3 : function (n : clong) : VALUE; varargs; cdecl;
  rb_ary_new4 : function (n : clong; elts : PVALUE) : VALUE; cdecl;
  rb_ary_plus : function (x, y : VALUE) : VALUE; cdecl;
  rb_ary_pop : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_push : function (ary, item : VALUE) : VALUE; cdecl;
  rb_ary_rassoc : function (ary, value : VALUE) : VALUE; cdecl;
  rb_ary_replace : function (copy, orig : VALUE) : VALUE; cdecl;
  rb_ary_resize : function (ary : VALUE; len : clong) : VALUE; cdecl;
  rb_ary_resurrect : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_reverse : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_shift : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_sort : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_sort_bang : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_store : procedure (ary : VALUE; idx : clong; val : VALUE); cdecl;
  rb_ary_subseq : function (ary : VALUE; beg, len : clong) : VALUE; cdecl;
  rb_ary_tmp_new : function (capa : clong) : VALUE; cdecl;
  rb_ary_to_ary : function (obj : VALUE) : VALUE; cdecl;
  rb_ary_to_s : function (ary : VALUE) : VALUE; cdecl;
  rb_ary_unshift : function (ary, item : VALUE) : VALUE; cdecl;
  rb_ascii8bit_encindex : function () : cint; cdecl;
  rb_ascii8bit_encoding : function () : Pointer; cdecl;
  rb_assoc_new : function (car, cdr : VALUE) : VALUE; cdecl;
  rb_attr : procedure (klass : VALUE; id : ID; read, write, ex : cint); cdecl;
  rb_attr_get : function (obj : VALUE; id : ID) : VALUE; cdecl;
  rb_autoload : procedure (_mod : VALUE; id : ID; _file : PChar); cdecl;
  rb_autoload_load : function (_mod : VALUE; id : ID) : VALUE; cdecl;
  rb_autoload_p : function (_mod : VALUE; id : ID) : VALUE; cdecl;
  rb_backref_get : function () : VALUE; cdecl;
  rb_backref_set : procedure (val : VALUE); cdecl;
  rb_backtrace : procedure (); cdecl;
  rb_big_2comp : procedure (x : VALUE); cdecl;
  rb_big2dbl : function (x : VALUE) : cdouble; cdecl;
  rb_big2ll : function (x : VALUE) : clonglong; cdecl;
  rb_big2long : function (x : VALUE) : PtrInt; cdecl;
  rb_big2str : function (x : VALUE; base : cint) : VALUE; cdecl;
  rb_big2str0 : function (x : VALUE; base, trim : cint) : VALUE; cdecl;
  rb_big2ull : function (x : VALUE) : culonglong; cdecl;
  rb_big2ulong : function (x : VALUE) : PtrUInt; cdecl;
  rb_big2ulong_pack : function (x : VALUE) : PtrUInt; cdecl;
  rb_big_and : function (xx, yy : VALUE) : VALUE; cdecl;
  rb_big_clone : function (x : VALUE) : VALUE; cdecl;
  rb_big_cmp : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_div : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_divmod : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_eq : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_eql : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_idiv : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_lshift : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_minus : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_modulo : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_mul : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_new : function (len : clong; sign : cint) : VALUE; cdecl;
  rb_big_norm : function (x : VALUE) : VALUE; cdecl;
  rb_big_or : function (xx, yy : VALUE) : VALUE; cdecl;
  rb_big_pack : procedure (val : VALUE; buf : pculong; num_longs : culong); cdecl;
  rb_big_plus : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_pow : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_resize : procedure (big : VALUE; len : clong); cdecl;
  rb_big_rshift : function (x, y : VALUE) : VALUE; cdecl;
  rb_big_unpack : function (buf : pculong; num_longs : culong) : VALUE; cdecl;
  rb_big_xor : function (xx, yy : VALUE) : VALUE; cdecl;
  rb_bigzero_p : function (x : VALUE) : cint; cdecl;
  rb_binding_new : function () : VALUE; cdecl;
  rb_block_call : function (obj : VALUE; mid : ID; argc : cint; argv : PVALUE; bl_proc : Pointer; data2 : VALUE) : VALUE; cdecl;
  rb_block_given_p : function () : cint; cdecl;
  rb_block_lambda : function () : VALUE; cdecl;
  rb_block_proc : function () : VALUE; cdecl;
  rb_bug : procedure (fmt : PChar); varargs; cdecl;
  rb_bug_errno : procedure (mesg : PChar; errno_arg : cint); cdecl;
  rb_call_super : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_catch : function (tag : PChar; func : p_catch_func; data : VALUE) : VALUE; cdecl;
  rb_catch_obj : function (tag : VALUE; func : p_catch_func; data : VALUE) : VALUE; cdecl;
  rb_char_to_option_kcode : function (c : cint; option, kcode : pcint) : cint; cdecl;
  rb_check_array_type : function (ary : VALUE) : VALUE; cdecl;
  rb_check_convert_type : function (val : VALUE; _type : cint; tname, method : PChar) : VALUE; cdecl;
  rb_check_frozen : procedure (obj : VALUE); cdecl;
  rb_check_funcall : function (recv : VALUE; mid : ID; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_check_hash_type : function (hash : VALUE) : VALUE; cdecl;
  rb_check_inheritable : procedure (super : VALUE); cdecl;
  rb_check_safe_obj : procedure (x : VALUE); cdecl;
  rb_check_safe_str : procedure (x : VALUE); cdecl;
  rb_check_string_type : function (str : VALUE) : VALUE; cdecl;
  rb_check_to_float : function (val : VALUE) : VALUE; cdecl;
  rb_check_to_integer : function (val : VALUE; method : PChar) : VALUE; cdecl;
  rb_check_type : procedure (x : VALUE; t : ruby_value_type); cdecl;
  rb_check_typeddata : function (obj : VALUE; data_type : Pointer) : Pointer; cdecl;
  rb_class2name : function (klass : VALUE) : PChar; cdecl;
  rb_class_boot : function (super : VALUE) : VALUE; cdecl;
  rb_class_get_superclass : function (klass : VALUE) : VALUE; cdecl;
  rb_class_inherited : function (super, klass : VALUE) : VALUE; cdecl;
  rb_class_inherited_p : function (_mod, arg : VALUE) : VALUE; cdecl;
  rb_class_instance_methods : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_class_name : function (klass : VALUE) : VALUE; cdecl;
  rb_class_new : function (super : VALUE) : VALUE; cdecl;
  rb_class_new_instance : function (argc : cint; argv : PVALUE; klass : VALUE) : VALUE; cdecl;
  rb_class_path : function (klass : VALUE) : VALUE; cdecl;
  rb_class_private_instance_methods : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_class_protected_instance_methods : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_class_public_instance_methods : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_class_real : function (cl : VALUE) : VALUE; cdecl;
  rb_class_superclass : function (klass : VALUE) : VALUE; cdecl;
  rb_clear_cache : procedure (); cdecl;
  rb_clear_cache_by_class : procedure (klass : VALUE); cdecl;
  rb_close_before_exec : procedure (lowfd, maxhint : cint; noclose_fds : VALUE); cdecl;
  rb_cmperr : procedure (x, y : VALUE); cdecl;
  rb_cmpint : function (val, a, b : VALUE) : cint; cdecl;
  rb_compile_cstr : function (f, s : PChar; len, line : cint) : Pointer; cdecl;
  rb_compile_error : procedure (_file : PChar; line : cint; fmt : PChar); varargs; cdecl;
  rb_compile_error_append : procedure (fmt : PChar); varargs; cdecl;
  rb_compile_error_with_enc : procedure (_file : PChar; line : cint; enc : Pointer; fmt : PChar); varargs; cdecl;
  rb_compile_file : function (f : PChar; _file : VALUE; start : cint) : Pointer; cdecl;
  rb_compile_string : function (f : PChar; s : VALUE; line : cint) : Pointer; cdecl;
  rb_compile_warn : procedure (_file : PChar; line : cint; fmt : PChar); varargs; cdecl;
  rb_compile_warning : procedure (_file : PChar; line : cint; fmt : PChar); varargs; cdecl;
  rb_Complex : function (x, y : VALUE) : VALUE; cdecl;
  rb_complex_new : function (x, y : VALUE) : VALUE; cdecl;
  rb_complex_polar : function (x, y : VALUE) : VALUE; cdecl;
  rb_complex_raw : function (x, y : VALUE) : VALUE; cdecl;
  rb_const_defined : function (klass : VALUE; id : ID) : cint; cdecl;
  rb_const_defined_at : function (klass : VALUE; id : ID) : cint; cdecl;
  rb_const_defined_from : function (klass : VALUE; id : ID) : cint; cdecl;
  rb_const_get : function (klass : VALUE; id : ID) : VALUE; cdecl;
  rb_const_get_at : function (klass : VALUE; id : ID) : VALUE; cdecl;
  rb_const_get_from : function (klass : VALUE; id : ID) : VALUE; cdecl;
  rb_const_list : function (data : Pointer) : VALUE; cdecl;
  rb_const_remove : function (_mod : VALUE; id : ID) : VALUE; cdecl;
  rb_const_set : procedure (klass : VALUE; id : ID; val : VALUE); cdecl;
  rb_convert_type : function (val : VALUE; _type : cint; tname, method : PChar) : VALUE; cdecl;
  rb_copy_generic_ivar : procedure (clone, obj : VALUE); cdecl;
  rb_cstr2inum : function (str : PChar; base : cint) : VALUE; cdecl;
  rb_cstr_to_dbl : function (p : PChar; badcheck : cint) : cdouble; cdecl;
  rb_cstr_to_inum : function (str : PChar; base, badcheck : cint) : VALUE; cdecl;
  rb_cvar_defined : function (klass : VALUE; id : ID) : VALUE; cdecl;
  rb_cvar_get : function (klass : VALUE; id : ID) : VALUE; cdecl;
  rb_cvar_set : procedure (klass : VALUE; id : ID; val : VALUE); cdecl;
  rb_cv_get : function (klass : VALUE; name : PChar) : VALUE; cdecl;
  rb_cv_set : procedure (klass : VALUE; name : PChar; val : VALUE); cdecl;
  rb_data_object_alloc : function (klass : VALUE; datap : Pointer; dmark, dfree : RUBY_DATA_FUNC) : VALUE; cdecl;
  rb_data_typed_object_alloc : function (klass : VALUE; datap : Pointer; _type : Pointer) : VALUE; cdecl;
  rb_dbl2big : function (d : cdouble) : VALUE; cdecl;
  rb_dbl_cmp : function (a, b : cdouble) : VALUE; cdecl;
  rb_declare_transcoder : procedure (enc1, enc2, lib : PChar); cdecl;
  rb_default_external_encoding : function () : Pointer; cdecl;
  rb_default_internal_encoding : function () : Pointer; cdecl;
  rb_define_alias : procedure (klass : VALUE; name1, name2 : PChar); cdecl;
  rb_define_alloc_func : procedure (klass : VALUE; func : p_func); cdecl;
  rb_define_attr : procedure (klass : VALUE; name : PChar; read, write : cint); cdecl;
  rb_define_class : function (name : PChar; super : VALUE) : VALUE; cdecl;
  rb_define_class_id : function (id : ID; super : VALUE) : VALUE; cdecl;
  rb_define_class_id_under : function (outer : VALUE; id : ID; super : VALUE) : VALUE; cdecl;
  rb_define_class_under : function (outer : VALUE; name : PChar; super : VALUE) : VALUE; cdecl;
  rb_define_class_variable : procedure (klass : VALUE; name : PChar; val : VALUE); cdecl;
  rb_define_const : procedure (klass : VALUE; name : PChar; val : VALUE); cdecl;
  rb_define_dummy_encoding : function (name : PChar) : cint; cdecl;
  rb_define_global_const : procedure (name : PChar; val : VALUE); cdecl;
  rb_define_global_function : procedure (name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_hooked_variable : procedure (name : PChar; data : PVALUE; getter : rb_gvar_getter_t; setter : rb_gvar_setter_t); cdecl;
  rb_define_method : procedure (klass : VALUE; name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_method_id : procedure (klass : VALUE; mid : ID; func : Pointer; argc : cint); cdecl;
  rb_define_module : function (name : PChar) : VALUE; cdecl;
  rb_define_module_function : procedure (_module : VALUE; name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_module_id : function (id : ID) : VALUE; cdecl;
  rb_define_module_id_under : function (outer : VALUE; id : ID) : VALUE; cdecl;
  rb_define_module_under : function (outer : VALUE; name : PChar) : VALUE; cdecl;
  rb_define_private_method : procedure (klass : VALUE; name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_protected_method : procedure (klass : VALUE; name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_readonly_variable : procedure (name : PChar; _var : PVALUE); cdecl;
  rb_define_singleton_method : procedure (obj : VALUE; name : PChar; func : Pointer; argc : cint); cdecl;
  rb_define_variable : procedure (name : PChar; _var : PVALUE); cdecl;
  rb_define_virtual_variable : procedure (name : PChar; getter : rb_gvar_getter_t; setter : rb_gvar_setter_t); cdecl;
  rb_detach_process : function (pid : PtrUInt) : VALUE; cdecl;
  rb_dir_getwd : function () : VALUE; cdecl;
  rb_during_gc : function () : cint; cdecl;
  rb_each : function (obj : VALUE) : VALUE; cdecl;
  rb_econv_asciicompat_encoding : function (ascii_incompat_name : PChar) : PChar; cdecl;
  rb_econv_binmode : procedure (ec : Pointer); cdecl;
  rb_econv_check_error : procedure (ec : Pointer); cdecl;
  rb_econv_close : procedure (ec : Pointer); cdecl;
  rb_econv_convert : function (ec : Pointer; input_ptr : PPChar; input_stop : PChar; output_ptr : PPChar; output_stop : PChar; flags : cint) : rb_econv_result_t; cdecl;
  rb_econv_decorate_at_first : function (ec : Pointer; decorator_name : PChar) : cint; cdecl;
  rb_econv_decorate_at_last : function (ec : Pointer; decorator_name : PChar) : cint; cdecl;
  rb_econv_encoding_to_insert_output : function (ec : Pointer) : PChar; cdecl;
  rb_econv_has_convpath_p : function (from_encoding, to_encoding : PChar) : cint; cdecl;
  rb_econv_insert_output : function (ec : Pointer; str : PChar; len : csize_t; str_encoding : PChar) : cint; cdecl;
  rb_econv_make_exception : function (ec : Pointer) : VALUE; cdecl;
  rb_econv_open : function (sname, dname : PChar; ecflags : cint) : Pointer; cdecl;
  rb_econv_open_exc : function (sname, dname : PChar; ecflags : cint) : VALUE; cdecl;
  rb_econv_open_opts : function (source_encoding, destination_encoding : PChar; ecflags : cint; opthash : VALUE) : Pointer; cdecl;
  rb_econv_prepare_options : function (opthash : VALUE; opts : PVALUE; ecflags : cint) : cint; cdecl;
  rb_econv_prepare_opts : function (opthash : VALUE; opts : PVALUE) : cint; cdecl;
  rb_econv_putback : procedure (ec : Pointer; p : PChar; n : cint); cdecl;
  rb_econv_putbackable : function (ec : Pointer) : cint; cdecl;
  rb_econv_set_replacement : function (ec : Pointer; str : PChar; len : csize_t; encname : PChar) : cint; cdecl;
  rb_econv_str_append : function (ec : Pointer; src, dst : VALUE; flags : cint) : VALUE; cdecl;
  rb_econv_str_convert : function (ec : Pointer; src : VALUE; flags : cint) : VALUE; cdecl;
  rb_econv_substr_append : function (ec : Pointer; src : VALUE; off, len : clong; dst : VALUE; flags : cint) : VALUE; cdecl;
  rb_econv_substr_convert : function (ec : Pointer; src : VALUE; byteoff, bytesize : clong; flags : cint) : VALUE; cdecl;
  rb_enc_ascget : function (p, e : PChar; len : pcint; enc : Pointer) : cint; cdecl;
  rb_enc_associate : function (obj : VALUE; enc : Pointer) : VALUE; cdecl;
  rb_enc_associate_index : function (obj : VALUE; idx : cint) : VALUE; cdecl;
  rb_enc_check : function (str1, str2 : VALUE) : Pointer; cdecl;
  rb_enc_codelen : function (c : cint; enc : Pointer) : cint; cdecl;
  rb_enc_codepoint : function (p, e : PChar; enc : Pointer) : cuint; cdecl;
  rb_enc_codepoint_len : function (p, e : PChar; len_p : pcint; enc : Pointer) : cuint; cdecl;
  rb_enc_compatible : function (str1, str2 : VALUE) : Pointer; cdecl;
  rb_enc_copy : procedure (obj1, obj2 : VALUE); cdecl;
  rb_encdb_alias : function (_alias, orig : PChar) : cint; cdecl;
  rb_encdb_declare : procedure (name : PChar); cdecl;
  rb_encdb_dummy : function (name : PChar) : cint; cdecl;
  rb_encdb_replicate : function (name, orig : PChar) : cint; cdecl;
  rb_enc_default_external : function () : VALUE; cdecl;
  rb_enc_default_internal : function () : VALUE; cdecl;
  rb_enc_fast_mbclen : function (p, e : PChar; enc : Pointer) : cint; cdecl;
  rb_enc_find : function (name : PChar) : Pointer; cdecl;
  rb_enc_find_index : function (name : PChar) : cint; cdecl;
  rb_enc_from_encoding : function (encoding : Pointer) : VALUE; cdecl;
  rb_enc_from_index : function (_index : cint) : Pointer; cdecl;
  rb_enc_get : function (obj : VALUE) : Pointer; cdecl;
  rb_enc_get_index : function (obj : VALUE) : cint; cdecl;
  rb_enc_mbclen : function (p, e : PChar; enc : Pointer) : cint; cdecl;
  rb_enc_nth : function (p, e : PChar; nth : clong; enc : Pointer) : PChar; cdecl;
  rb_enc_path_end : function (path, _end : PChar; enc : Pointer) : PChar; cdecl;
  rb_enc_path_last_separator : function (path, _end : PChar; enc : Pointer) : PChar; cdecl;
  rb_enc_path_next : function (s, e : PChar; enc : Pointer) : PChar; cdecl;
  rb_enc_path_skip_prefix : function (path, _end : PChar; enc : Pointer) : PChar; cdecl;
  rb_enc_precise_mbclen : function (p, e : PChar; enc : Pointer) : cint; cdecl;
  rb_enc_register : function (name : PChar; encoding : Pointer) : cint; cdecl;
  rb_enc_reg_new : function (s : PChar; len : clong; enc : Pointer; options : cint) : VALUE; cdecl;
  rb_enc_replicate : function (name : PChar; encoding : Pointer) : cint; cdecl;
  rb_enc_set_base : procedure (name, orig : PChar); cdecl;
  rb_enc_set_default_external : procedure (encoding : VALUE); cdecl;
  rb_enc_set_default_internal : procedure (encoding : VALUE); cdecl;
  rb_enc_set_index : procedure (obj : VALUE; idx : cint); cdecl;
  rb_enc_sprintf : function (enc : Pointer; format : PChar) : VALUE; varargs; cdecl;
  rb_enc_str_asciionly_p : function (str : VALUE) : cint; cdecl;
  rb_enc_str_buf_cat : function (str : VALUE; ptr : PChar; len : clong; ptr_enc : Pointer) : VALUE; cdecl;
  rb_enc_str_coderange : function (str : VALUE) : cint; cdecl;
  rb_enc_strlen : function (p, e : PChar; enc : Pointer) : clong; cdecl;
  rb_enc_str_new : function (ptr : PChar; len : clong; enc : Pointer) : VALUE; cdecl;
  rb_enc_symname2_p : function (name : PChar; len : clong; enc : Pointer) : cint; cdecl;
  rb_enc_symname_p : function (name : PChar; enc : Pointer) : cint; cdecl;
  rb_enc_tolower : function (c : cint; enc : Pointer) : cint; cdecl;
  rb_enc_toupper : function (c : cint; enc : Pointer) : cint; cdecl;
  rb_enc_uint_chr : function (code : cuint; enc : Pointer) : VALUE; cdecl;
  rb_enc_unicode_p : function (enc : Pointer) : cint; cdecl;
  rb_ensure : function (b_proc : p_func; data1 : VALUE; e_proc : p_func; data2 : VALUE) : VALUE; cdecl;
  rb_enumeratorize : function (obj, meth : VALUE; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_env_clear : function () : VALUE; cdecl;
  rb_env_path_tainted : function () : cint; cdecl;
  rb_eof_error : procedure (); cdecl;
  rb_eql : function (obj1, obj2 : VALUE) : cint; cdecl;
  rb_equal : function (obj1, obj2 : VALUE) : VALUE; cdecl;
  rb_errinfo : function () : VALUE; cdecl;
  rb_error_frozen : procedure (what : PChar); cdecl;
  rb_eval_cmd : function (cmd, arg : VALUE; level : cint) : VALUE; cdecl;
  rb_eval_string : function (str : PChar) : VALUE; cdecl;
  rb_eval_string_protect : function (str : PChar; state : pcint) : VALUE; cdecl;
  rb_eval_string_wrap : function (str : PChar; state : pcint) : VALUE; cdecl;
  rb_exc_fatal : procedure (mesg : VALUE); cdecl;
  rb_exc_new : function (etype : VALUE; ptr : PChar; len : clong) : VALUE; cdecl;
  rb_exc_new2 : function (etype : VALUE; s : PChar) : VALUE; cdecl;
  rb_exc_new3 : function (etype, str : VALUE) : VALUE; cdecl;
  rb_exc_raise : procedure (mesg : VALUE); cdecl;
  rb_exec : function (e : Pointer) : cint; cdecl;
  rb_exec_arg_addopt : function (e : Pointer; key, val : VALUE) : cint; cdecl;
  rb_exec_arg_fixup : procedure (e : Pointer); cdecl;
  rb_exec_arg_init : function (argc : cint; argv : PVALUE; accept_shell : cint; e : Pointer) : VALUE; cdecl;
  rb_exec_end_proc : procedure (); cdecl;
  rb_exec_err : function (e : Pointer; errmsg : PChar; errmsg_buflen : csize_t) : cint; cdecl;
  rb_exec_recursive : function (func : p_recursive_func; obj, arg : VALUE) : VALUE; cdecl;
  rb_exec_recursive_outer : function (func : p_recursive_func; obj, arg : VALUE) : VALUE; cdecl;
  rb_exec_recursive_paired : function (func : p_recursive_func; obj, paired_obj, arg : VALUE) : VALUE; cdecl;
  rb_exit : procedure (status : cint); cdecl;
  rb_extend_object : procedure (obj, _module : VALUE); cdecl;
  rb_external_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_external_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_external_str_new_with_enc : function (ptr : PChar; len : clong; eenc : Pointer) : VALUE; cdecl;
  rb_f_abort : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_fatal : procedure (fmt : PChar); varargs; cdecl;
  rb_fd_clr : procedure (n : cint; fds : Pointer); cdecl;
  rb_fd_copy : procedure (dst, src : Pointer; max : cint); cdecl;
  rb_fd_dup : procedure (dst, src : Pointer); cdecl;
  rb_fd_init : procedure (_set : Pointer); cdecl;
  rb_fd_isset : function (n : cint; fds : Pointer) : cint; cdecl;
  rb_fdopen : function (fd : cint; modestr : PChar) : Pointer; cdecl;
  rb_fd_select : function (n : cint; readfds, writefds, exceptfds : Pointer; timeout : ptimeval) : cint; cdecl;
  rb_fd_set : procedure (fd : cint; _set : Pointer); cdecl;
  rb_fd_term : procedure (_set : Pointer); cdecl;
  rb_fd_zero : procedure (fds : Pointer); cdecl;
  rb_feature_provided : function (feature : PChar; loading : PPChar) : cint; cdecl;
  rb_f_exec : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_f_exit : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_f_global_variables : function () : VALUE; cdecl;
  rb_fiber_alive_p : function (fibval : VALUE) : VALUE; cdecl;
  rb_fiber_current : function () : VALUE; cdecl;
  rb_fiber_new : function (func : Pointer; obj : VALUE) : VALUE; cdecl;
  rb_fiber_resume : function (fibval : VALUE; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_fiber_yield : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_file_absolute_path : function (fname, dname : VALUE) : VALUE; cdecl;
  rb_file_directory_p : function (obj, fname : VALUE) : VALUE; cdecl;
  rb_file_dirname : function (fname : VALUE) : VALUE; cdecl;
  rb_file_expand_path : function (fname, dname : VALUE) : VALUE; cdecl;
  rb_file_open : function (fname, modestr : PChar) : VALUE; cdecl;
  rb_file_open_str : function (fname : VALUE; modestr : PChar) : VALUE; cdecl;
  rb_file_s_absolute_path : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_file_s_expand_path : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_filesystem_encindex : function () : cint; cdecl;
  rb_filesystem_encoding : function () : Pointer; cdecl;
  rb_filesystem_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_filesystem_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_find_file : function (path : VALUE) : VALUE; cdecl;
  rb_find_file_ext : function (filep : PVALUE; ext : PPChar) : cint; cdecl;
  rb_find_file_ext_safe : function (filep : PVALUE; ext : PPChar; safelevel : cint) : cint; cdecl;
  rb_find_file_safe : function (path : VALUE; safelevel : cint) : VALUE; cdecl;
  rb_fix2int : function (val : VALUE) : clong; cdecl;
  rb_fix2str : function (x : VALUE; base : cint) : VALUE; cdecl;
  rb_fix2uint : function (val : VALUE) : culong; cdecl;
  rb_f_kill : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_Float : function (val : VALUE) : VALUE; cdecl;
  rb_f_notimplement : function (argc : cint; argv : PVALUE; obj : VALUE) : VALUE; cdecl;
  rb_fork : function (status : pcint; chfunc : p_chfunc; charg : Pointer; fds : VALUE) : PtrUInt; cdecl;
  rb_fork_err : function (status : pcint; chfunc : p_chfunc_msg; charg : Pointer; fds : VALUE; errmsg : PChar; errmsg_buflen : csize_t) : PtrUInt; cdecl;
  rb_frame_callee : function () : ID; cdecl;
  rb_frame_method_id_and_class : function (idp : PID; klassp : PVALUE) : cint; cdecl;
  rb_frame_pop : procedure (); cdecl;
  rb_frame_this_func : function () : ID; cdecl;
  rb_free_generic_ivar : procedure (obj : VALUE); cdecl;
  rb_free_tmp_buffer : procedure (store : PVALUE); cdecl;
  rb_f_require : function (obj, fname : VALUE) : VALUE; cdecl;
  rb_frozen_class_p : procedure (klass : VALUE); cdecl;
  rb_f_sprintf : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_f_trace_var : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_funcall : function (recv : VALUE; mid : ID; n : cint) : VALUE; varargs; cdecl;
  rb_funcall2 : function (recv : VALUE; mid : ID; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_funcall3 : function (recv : VALUE; mid : ID; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_funcall_passing_block : function (recv : VALUE; mid : ID; argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_f_untrace_var : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_gc : procedure (); cdecl;
  rb_gc_call_finalizer_at_exit : procedure (); cdecl;
  rb_gc_copy_finalizer : procedure (dest, obj : VALUE); cdecl;
  rb_gc_disable : function () : VALUE; cdecl;
  rb_gc_enable : function () : VALUE; cdecl;
  rb_gc_finalize_deferred : procedure (); cdecl;
  rb_gc_force_recycle : procedure (p : VALUE); cdecl;
  rb_gc_mark : procedure (ptr : VALUE); cdecl;
  rb_gc_mark_global_tbl : procedure (); cdecl;
  rb_gc_mark_locations : procedure (start, _end : PVALUE); cdecl;
  rb_gc_mark_maybe : procedure (obj : VALUE); cdecl;
  rb_gc_register_address : procedure (addr : PVALUE); cdecl;
  rb_gc_register_mark_object : procedure (obj : VALUE); cdecl;
  rb_gc_set_params : procedure (); cdecl;
  rb_gc_start : function () : VALUE; cdecl;
  rb_gc_unregister_address : procedure (addr : PVALUE); cdecl;
  rb_generic_ivar_memsize : function (obj : VALUE) : csize_t; cdecl;
  rb_generic_ivar_table : function (obj : VALUE) : Pointer; cdecl;
  rb_genrand_int32 : function () : cuint; cdecl;
  rb_genrand_real : function () : cdouble; cdecl;
  rb_genrand_ulong_limited : function (limit : culong) : culong; cdecl;
  rb_get_alloc_func : function (klass : VALUE) : rb_alloc_func_t; cdecl;
  rb_get_argv : function () : VALUE; cdecl;
  rb_get_coverages : function () : VALUE; cdecl;
  rb_get_path : function (obj : VALUE) : VALUE; cdecl;
  rb_get_path_no_checksafe : function (obj : VALUE) : VALUE; cdecl;
  rb_gets : function () : VALUE; cdecl;
  rb_get_values_at : function (obj : VALUE; olen : clong; argc : cint; argv : PVALUE; func : p_objlen_func) : VALUE; cdecl;
  rb_glob : procedure (path : PChar; func : p_glob_func; arg : VALUE); cdecl;
  rb_global_entry : function (id : ID) : Pointer; cdecl;
  rb_global_variable : procedure (_var : PVALUE); cdecl;
  rb_gvar_defined : function (entry : Pointer) : VALUE; cdecl;
  rb_gvar_get : function (entry : Pointer) : VALUE; cdecl;
  rb_gvar_readonly_setter : procedure (val : VALUE; id : ID; data, gvar : Pointer); cdecl;
  rb_gvar_set : function (entry : Pointer; val : VALUE) : VALUE; cdecl;
  rb_gvar_undef_getter : function (id : ID; data, _var : Pointer) : VALUE; cdecl;
  rb_gvar_undef_marker : procedure (_var : Pointer); cdecl;
  rb_gvar_undef_setter : procedure (val : VALUE; id : ID; data, _var : Pointer); cdecl;
  rb_gvar_val_getter : function (id : ID; data, _var : Pointer) : VALUE; cdecl;
  rb_gvar_val_marker : procedure (_var : PVALUE); cdecl;
  rb_gvar_val_setter : procedure (val : VALUE; id : ID; data, _var : Pointer); cdecl;
  rb_gvar_var_getter : function (id : ID; data, gvar : Pointer) : VALUE; cdecl;
  rb_gvar_var_marker : procedure (_var : PVALUE); cdecl;
  rb_gvar_var_setter : procedure (val : VALUE; id : ID; data, gvar : Pointer); cdecl;
  rb_gv_get : function (name : PChar) : VALUE; cdecl;
  rb_gv_set : function (name : PChar; val : VALUE) : VALUE; cdecl;
  rb_hash : function (obj : VALUE) : VALUE; cdecl;
  rb_hash_aref : function (hash, key : VALUE) : VALUE; cdecl;
  rb_hash_aset : function (hash, key, val : VALUE) : VALUE; cdecl;
  rb_hash_delete : function (hash, key : VALUE) : VALUE; cdecl;
  rb_hash_delete_if : function (hash : VALUE) : VALUE; cdecl;
  rb_hash_dup : function (hash : VALUE) : VALUE; cdecl;
  rb_hash_fetch : function (hash, key : VALUE) : VALUE; cdecl;
  rb_hash_foreach : procedure (hash : VALUE; func : rb_foreach_func; farg : VALUE); cdecl;
  rb_hash_freeze : function (hash : VALUE) : VALUE; cdecl;
  rb_hash_lookup : function (hash, key : VALUE) : VALUE; cdecl;
  rb_hash_lookup2 : function (hash, key, def : VALUE) : VALUE; cdecl;
  rb_hash_new : function () : VALUE; cdecl;
  rb_hash_start : function (h : st_index_t) : st_index_t; cdecl;
  rb_hash_tbl : function (hash : VALUE) : Pointer; cdecl;
  rb_hash_update_by : function (hash1, hash2 : VALUE; func : rb_hash_update_func) : VALUE; cdecl;
  rb_id2name : function (id : ID) : PChar; cdecl;
  rb_id2str : function (id : ID) : VALUE; cdecl;
  rb_id_attrset : function (id : ID) : ID; cdecl;
  rb_include_module : procedure (klass, module : VALUE); cdecl;
  rb_insecure_operation : procedure (); cdecl;
  rb_inspect : function (obj : VALUE) : VALUE; cdecl;
  rb_int2big : function (n : PtrInt) : VALUE; cdecl;
  rb_int2inum : function (n : PtrInt) : VALUE; cdecl;
  rb_Integer : function (val : VALUE) : VALUE; cdecl;
  rb_intern : function (name : PChar) : ID; cdecl;
  rb_intern2 : function (name : PChar; len : clong) : ID; cdecl;
  rb_intern3 : function (name : PChar; len : clong; enc : Pointer) : ID; cdecl;
  rb_intern_str : function (str : VALUE) : ID; cdecl;
  rb_interrupt : procedure (); cdecl;
  rb_invalid_str : procedure (str, _type : PChar); cdecl;
  rb_io_addstr : function (io, str : VALUE) : VALUE; cdecl;
  rb_io_ascii8bit_binmode : function (io : VALUE) : VALUE; cdecl;
  rb_io_binmode : function (io : VALUE) : VALUE; cdecl;
  rb_io_bufwrite : function (io : VALUE; buf : Pointer; size : csize_t) : csize_t; cdecl;
  rb_io_check_byte_readable : procedure (fptr : Pointer); cdecl;
  rb_io_check_char_readable : procedure (fptr : Pointer); cdecl;
  rb_io_check_closed : procedure (fptr : Pointer); cdecl;
  rb_io_check_initialized : procedure (fptr : Pointer); cdecl;
  rb_io_check_readable : procedure (fptr : Pointer); cdecl;
  rb_io_check_writable : procedure (fptr : Pointer); cdecl;
  rb_io_close : function (io : VALUE) : VALUE; cdecl;
  rb_io_eof : function (io : VALUE) : VALUE; cdecl;
  rb_io_extract_encoding_option : function (opt : VALUE; enc_p, enc2_p : PPointer; fmode_p : pcint) : cint; cdecl;
  rb_io_fdopen : function (fd, oflags : cint; path : PChar) : VALUE; cdecl;
  rb_io_flush : function (io : VALUE) : VALUE; cdecl;
  rb_io_fptr_finalize : function (fptr : Pointer) : cint; cdecl;
  rb_io_getbyte : function (io : VALUE) : VALUE; cdecl;
  rb_io_get_io : function (io : VALUE) : VALUE; cdecl;
  rb_io_gets : function (io : VALUE) : VALUE; cdecl;
  rb_io_get_write_io : function (io : VALUE) : VALUE; cdecl;
  rb_io_memsize : function (fptr : Pointer) : csize_t; cdecl;
  rb_io_modestr_fmode : function (modestr : PChar) : cint; cdecl;
  rb_io_modestr_oflags : function (modestr : PChar) : cint; cdecl;
  rb_io_oflags_fmode : function (oflags : cint) : cint; cdecl;
  rb_io_print : function (argc : cint; argv : PVALUE; _out : VALUE) : VALUE; cdecl;
  rb_io_printf : function (argc : cint; argv : PVALUE; _out : VALUE) : VALUE; cdecl;
  rb_io_puts : function (argc : cint; argv : PVALUE; _out : VALUE) : VALUE; cdecl;
  rb_io_read_check : procedure (fptr : Pointer); cdecl;
  rb_io_read_pending : function (fptr : Pointer) : cint; cdecl;
  rb_io_set_nonblock : procedure (fptr : Pointer); cdecl;
  rb_io_set_write_io : function (io, w : VALUE) : VALUE; cdecl;
  rb_io_stdio_file : function (fptr : Pointer) : Pointer; cdecl;
  rb_io_synchronized : procedure (fptr : Pointer); cdecl;
  rb_io_taint_check : function (io : VALUE) : VALUE; cdecl;
  rb_io_ungetbyte : function (io, b : VALUE) : VALUE; cdecl;
  rb_io_ungetc : function (io, c : VALUE) : VALUE; cdecl;
  rb_io_wait_readable : function (f : cint) : cint; cdecl;
  rb_io_wait_writable : function (f : cint) : cint; cdecl;
  rb_io_write : function (io, str : VALUE) : VALUE; cdecl;
  rb_is_absolute_path : function (path : PChar) : cint; cdecl;
  rb_isalnum : function (c : cint) : cint; cdecl;
  rb_isalpha : function (c : cint) : cint; cdecl;
  rb_isblank : function (c : cint) : cint; cdecl;
  rb_is_class_id : function (id : ID) : cint; cdecl;
  rb_iscntrl : function (c : cint) : cint; cdecl;
  rb_is_const_id : function (id : ID) : cint; cdecl;
  rb_isdigit : function (c : cint) : cint; cdecl;
  rb_iseq_build_from_ary : function (iseq : Pointer; locals, args, exception, body : VALUE) : VALUE; cdecl;
  rb_iseq_compile : function (src, _file, line : VALUE) : VALUE; cdecl;
  rb_iseq_compile_node : function (_self : VALUE; node : Pointer) : VALUE; cdecl;
  rb_iseq_compile_with_option : function ( src, _file, filepath, line, opt : VALUE) : VALUE; cdecl;
  rb_iseq_disasm : function (_self : VALUE) : VALUE; cdecl;
  rb_iseq_disasm_insn : function (ret : VALUE; iseq : PVALUE; pos : csize_t; iseqdat : Pointer; child : VALUE) : cint; cdecl;
  rb_iseq_eval : function (iseqval : VALUE) : VALUE; cdecl;
  rb_iseq_eval_main : function (iseqval : VALUE) : VALUE; cdecl;
  rb_iseq_first_lineno : function (iseq : Pointer) : cint; cdecl;
  rb_iseq_load : function (data, parent, opt : VALUE) : VALUE; cdecl;
  rb_iseq_new : function (node : Pointer; name, filename, filepath, parent : VALUE; _type : iseq_type) : VALUE; cdecl;
  rb_iseq_new_main : function (node : Pointer; filename, filepath : VALUE) : VALUE; cdecl;
  rb_iseq_new_top : function (node : Pointer; name, filename, filepath, parent : VALUE) : VALUE; cdecl;
  rb_iseq_new_with_bopt : function (node : Pointer; name, filename, filepath, line_no, parent : VALUE; _type : iseq_type; bopt : VALUE) : VALUE; cdecl;
  rb_iseq_new_with_opt : function (node : Pointer; name, filename, filepath, line_no, parent : VALUE; _type : iseq_type; option : Pointer) : VALUE; cdecl;
  rb_iseq_parameters : function (iseq : Pointer; is_proc : Pointer) : VALUE; cdecl;
  rb_iseq_translate_threaded_code : function (iseq : Pointer) : cint; cdecl;
  rb_isgraph : function (c : cint) : cint; cdecl;
  rb_is_instance_id : function (id : ID) : cint; cdecl;
  rb_is_junk_id : function (id : ID) : cint; cdecl;
  rb_is_local_id : function (id : ID) : cint; cdecl;
  rb_islower : function (c : cint) : cint; cdecl;
  rb_isprint : function (c : cint) : cint; cdecl;
  rb_ispunct : function (c : cint) : cint; cdecl;
  rb_isspace : function (c : cint) : cint; cdecl;
  rb_isupper : function (c : cint) : cint; cdecl;
  rb_isxdigit : function (c : cint) : cint; cdecl;
  rb_iterate : function (it_proc : p_func; data1 : VALUE; bl_proc : Pointer; data2 : VALUE) : VALUE; cdecl;
  rb_iter_break : procedure (); cdecl;
  rb_ivar_count : function (obj : VALUE) : st_index_t; cdecl;
  rb_ivar_defined : function (obj : VALUE; id : ID) : VALUE; cdecl;
  rb_ivar_foreach : procedure (obj : VALUE; func : Pointer; arg : st_index_t); cdecl;
  rb_ivar_get : function (obj : VALUE; id : ID) : VALUE; cdecl;
  rb_ivar_set : function (obj : VALUE; id : ID; val : VALUE) : VALUE; cdecl;
  rb_iv_get : function (obj : VALUE; name : PChar) : VALUE; cdecl;
  rb_iv_set : function (obj : VALUE; name : PChar; val : VALUE) : VALUE; cdecl;
  rb_jump_tag : procedure (tag : cint); cdecl;
  rb_lastline_get : function () : VALUE; cdecl;
  rb_lastline_set : procedure (val : VALUE); cdecl;
  rb_last_status_get : function () : VALUE; cdecl;
  rb_last_status_set : procedure (status : cint; pid : PtrUInt); cdecl;
  rb_ll2inum : function (n : clonglong) : VALUE; cdecl;
  rb_load : procedure (fname : VALUE; wrap : cint); cdecl;
  rb_loaderror : procedure (fmt : PChar); varargs; cdecl;
  rb_load_file : function (fname : PChar) : Pointer; cdecl;
  rb_load_protect : procedure (fname : VALUE; wrap : cint; state : pcint); cdecl;
  rb_locale_charmap : function (klass : VALUE) : VALUE; cdecl;
  rb_locale_encindex : function () : cint; cdecl;
  rb_locale_encoding : function () : Pointer; cdecl;
  rb_locale_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_locale_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_make_backtrace : function () : VALUE; cdecl;
  rb_make_exception : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_make_metaclass : function (obj, unused : VALUE) : VALUE; cdecl;
  rb_mark_generic_ivar : procedure (obj : VALUE); cdecl;
  rb_mark_generic_ivar_tbl : procedure (); cdecl;
  rb_mark_hash : procedure (tbl : Pointer); cdecl;
  rb_mark_set : procedure (tbl : Pointer); cdecl;
  rb_mark_tbl : procedure (tbl : Pointer); cdecl;
  rb_marshal_define_compat : procedure (newclass, oldclass : VALUE; dumper : p_dumper; loader : p_loader); cdecl;
  rb_marshal_dump : function (obj, port : VALUE) : VALUE; cdecl;
  rb_marshal_load : function (port : VALUE) : VALUE; cdecl;
  rb_match_busy : procedure (match : VALUE); cdecl;
  rb_memcicmp : function (x, y : Pointer; len : clong) : cint; cdecl;
  rb_memerror : procedure (); cdecl;
  rb_memhash : function (ptr : Pointer; len : clong) : st_index_t; cdecl;
  rb_memsearch : function (x0 : Pointer; m : clong; x1 : Pointer; n : clong; enc : Pointer) : clong; cdecl;
  rb_method_basic_definition_p : function (klass : VALUE; id : ID) : cint; cdecl;
  rb_method_boundp : function (klass : VALUE; id : ID; ex : cint) : cint; cdecl;
  rb_method_call : function (argc : cint; argv : PVALUE; method : VALUE) : VALUE; cdecl;
  rb_method_get_iseq : function (method : VALUE) : Pointer; cdecl;
  rb_mod_ancestors : function (_mod : VALUE) : VALUE; cdecl;
  rb_mod_class_variables : function (obj : VALUE) : VALUE; cdecl;
  rb_mod_constants : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_mod_const_at : function (_mod : VALUE; data : Pointer) : Pointer; cdecl;
  rb_mod_const_missing : function (klass, name : VALUE) : VALUE; cdecl;
  rb_mod_const_of : function (_mod : VALUE; data : Pointer) : Pointer; cdecl;
  rb_mod_included_modules : function (_mod : VALUE) : VALUE; cdecl;
  rb_mod_include_p : function (_mod, mod2 : VALUE) : VALUE; cdecl;
  rb_mod_init_copy : function (clone, orig : VALUE) : VALUE; cdecl;
  rb_mod_method_arity : function (_mod : VALUE; id : ID) : cint; cdecl;
  rb_mod_module_eval : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_mod_module_exec : function (argc : cint; argv : PVALUE; _mod : VALUE) : VALUE; cdecl;
  rb_mod_name : function (_mod : VALUE) : VALUE; cdecl;
  rb_mod_remove_const : function (_mod, name : VALUE) : VALUE; cdecl;
  rb_mod_remove_cvar : function (_mod, name : VALUE) : VALUE; cdecl;
  rb_mod_syserr_fail : procedure (_mod : VALUE; e : cint; mesg : PChar); cdecl;
  rb_mod_syserr_fail_str : procedure (_mod : VALUE; e : cint; mesg : VALUE); cdecl;
  rb_mod_sys_fail : procedure (_mod : VALUE; mesg : PChar); cdecl;
  rb_mod_sys_fail_str : procedure (_mod, mesg : VALUE); cdecl;
  rb_module_new : function () : VALUE; cdecl;
  rb_mutex_lock : function (_self : VALUE) : VALUE; cdecl;
  rb_mutex_locked_p : function (_self : VALUE) : VALUE; cdecl;
  rb_mutex_new : function () : VALUE; cdecl;
  rb_mutex_sleep : function (_self, timeout : VALUE) : VALUE; cdecl;
  rb_mutex_synchronize : function (mutex : VALUE; func : p_func; arg : VALUE) : VALUE; cdecl;
  rb_mutex_trylock : function (_self : VALUE) : VALUE; cdecl;
  rb_mutex_unlock : function (_self : VALUE) : VALUE; cdecl;
  rb_name_class : procedure (klass : VALUE; id : ID); cdecl;
  rb_name_error : procedure (id : ID; fmt : PChar); varargs; cdecl;
  rb_need_block : procedure (); cdecl;
  rb_newobj : function () : VALUE; cdecl;
  rb_notimplement : procedure (); cdecl;
  rb_num2dbl : function (val : VALUE) : cdouble; cdecl;
  rb_num2fix : function (val : VALUE) : VALUE; cdecl;
  rb_num2int : function (val : VALUE) : clong; cdecl;
  rb_num2ll : function (val : VALUE) : clonglong; cdecl;
  rb_num2long : function (val : VALUE) : PtrInt; cdecl;
  rb_num2uint : function (val : VALUE) : culong; cdecl;
  rb_num2ull : function (val : VALUE) : culonglong; cdecl;
  rb_num2ulong : function (val : VALUE) : PtrUInt; cdecl;
  rb_num_coerce_bin : function (x, y : VALUE; func : ID) : VALUE; cdecl;
  rb_num_coerce_cmp : function (x, y : VALUE; func : ID) : VALUE; cdecl;
  rb_num_coerce_relop : function (x, y : VALUE; func : ID) : VALUE; cdecl;
  rb_num_zerodiv : procedure (); cdecl;
  rb_obj_alloc : function (klass : VALUE) : VALUE; cdecl;
  rb_obj_as_string : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_call_init : procedure (obj : VALUE; argc : cint; argv : PVALUE); cdecl;
  rb_obj_class : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_classname : function (obj : VALUE) : PChar; cdecl;
  rb_obj_clone : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_dup : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_encoding : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_freeze : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_frozen_p : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_id : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_infect : procedure (obj1, obj2 : VALUE); cdecl;
  rb_obj_init_copy : function (obj, orig : VALUE) : VALUE; cdecl;
  rb_obj_instance_eval : function (argc : cint; argv : PVALUE; _self : VALUE) : VALUE; cdecl;
  rb_obj_instance_exec : function (argc : cint; argv : PVALUE; _self : VALUE) : VALUE; cdecl;
  rb_obj_instance_variables : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_is_instance_of : function (obj, c : VALUE) : VALUE; cdecl;
  rb_obj_is_kind_of : function (obj, c : VALUE) : VALUE; cdecl;
  rb_obj_is_method : function (m : VALUE) : VALUE; cdecl;
  rb_obj_is_proc : function (proc : VALUE) : VALUE; cdecl;
  rb_obj_method : function (obj, vid : VALUE) : VALUE; cdecl;
  rb_obj_method_arity : function (obj : VALUE; id : ID) : cint; cdecl;
  rb_obj_remove_instance_variable : function (obj, name : VALUE) : VALUE; cdecl;
  rb_obj_respond_to : function (obj : VALUE; id : ID; priv : cint) : cint; cdecl;
  rb_obj_singleton_methods : function (argc : cint; argv : PVALUE; obj : VALUE) : VALUE; cdecl;
  rb_objspace_data_type_memsize : function (obj : VALUE) : csize_t; cdecl;
  rb_objspace_data_type_name : function (obj : VALUE) : PChar; cdecl;
  rb_objspace_each_objects : procedure (callback : each_obj_callback; data : Pointer); cdecl;
  rb_obj_taint : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_tainted : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_trust : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_untaint : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_untrust : function (obj : VALUE) : VALUE; cdecl;
  rb_obj_untrusted : function (obj : VALUE) : VALUE; cdecl;
  rb_p : procedure (obj : VALUE); cdecl;
  rb_parser_append_print : function (vparser : VALUE; node : Pointer) : Pointer; cdecl;
  rb_parser_calloc : function (parser : Pointer; nelem, size : csize_t) : Pointer; cdecl;
  rb_parser_compile_cstr : function (vparser : VALUE; f, s : PChar; len, line : cint) : Pointer; cdecl;
  rb_parser_compile_file : function (vparser : VALUE; f : PChar; _file : VALUE; start : cint) : Pointer; cdecl;
  rb_parser_compile_string : function (vparser : VALUE; f : PChar; s : VALUE; line : cint) : Pointer; cdecl;
  rb_parser_dump_tree : function (node : Pointer; comment : cint) : VALUE; cdecl;
  rb_parser_encoding : function (vparser : VALUE) : VALUE; cdecl;
  rb_parser_end_seen_p : function (vparser : VALUE) : VALUE; cdecl;
  rb_parser_free : procedure (parser, ptr : Pointer); cdecl;
  rb_parser_get_yydebug : function (_self : VALUE) : VALUE; cdecl;
  rb_parser_malloc : function (parser : Pointer; size : csize_t) : Pointer; cdecl;
  rb_parser_new : function () : VALUE; cdecl;
  rb_parser_realloc : function (parser, ptr : Pointer; size : csize_t) : Pointer; cdecl;
  rb_parser_set_yydebug : function (_self, flag : VALUE) : VALUE; cdecl;
  rb_parser_while_loop : function (vparser : VALUE; node : Pointer; chop, split : cint) : Pointer; cdecl;
  rb_path2class : function (path : PChar) : VALUE; cdecl;
  rb_path_check : function (path : PChar) : cint; cdecl;
  rb_path_to_class : function (pathname : VALUE) : VALUE; cdecl;
  rb_pipe : function (pipes : pcint) : cint; cdecl;
  rb_proc_arity : function (_self : VALUE) : cint; cdecl;
  rb_proc_call : function (_self, args : VALUE) : VALUE; cdecl;
  rb_proc_call_with_block : function (_self : VALUE; argc : cint; argv : PVALUE; pass_procval : VALUE) : VALUE; cdecl;
  rb_proc_exec : function (str : PChar) : cint; cdecl;
  rb_proc_exec_n : function (argc : cint; argv : PVALUE; prog : PChar) : cint; cdecl;
  rb_proc_get_iseq : function (_self : VALUE; is_proc : pcint) : Pointer; cdecl;
  rb_proc_lambda_p : function (procval : VALUE) : VALUE; cdecl;
  rb_proc_new : function (func : Pointer; val : VALUE) : VALUE; cdecl;
  rb_proc_times : function (obj : VALUE) : VALUE; cdecl;
  rb_protect : function (proc : p_func; data : VALUE; status : pcint) : VALUE; cdecl;
  rb_provide : procedure (feature : PChar); cdecl;
  rb_provided : function (feature : PChar) : cint; cdecl;
  rb_quad_pack : procedure (buf : PChar; val : VALUE); cdecl;
  rb_quad_unpack : function (buf : PChar; sign : cint) : VALUE; cdecl;
  rb_raise : procedure (exc : VALUE; fmt : PChar); varargs; cdecl;
  rb_random_bytes : function (obj : VALUE; n : clong) : VALUE; cdecl;
  rb_random_int32 : function (obj : VALUE) : cuint; cdecl;
  rb_random_real : function (obj : VALUE) : cdouble; cdecl;
  rb_range_beg_len : function (range : VALUE; begp, lenp : pclong; len : clong; err : cint) : VALUE; cdecl;
  rb_range_new : function (beg, _end : VALUE; exclude_end : cint) : VALUE; cdecl;
  rb_range_values : function (range : VALUE; begp, endp : PVALUE; exclp : pcint) : cint; cdecl;
  rb_Rational : function (x, y : VALUE) : VALUE; cdecl;
  rb_rational_new : function (x, y : VALUE) : VALUE; cdecl;
  rb_rational_raw : function (x, y : VALUE) : VALUE; cdecl;
  rb_read_check : procedure (fp : Pointer); cdecl;
  rb_reg_adjust_startpos : function (re, str : VALUE; pos : clong; reverse : cint) : clong; cdecl;
  rb_reg_alloc : function () : VALUE; cdecl;
  rb_reg_backref_number : function (match, backref : VALUE) : cint; cdecl;
  rb_reg_init_str : function (re, s : VALUE; options : cint) : VALUE; cdecl;
  rb_register_transcoder : procedure (tr : Pointer); cdecl;
  rb_reg_last_match : function (match : VALUE) : VALUE; cdecl;
  rb_reg_match : function (re, str : VALUE) : VALUE; cdecl;
  rb_reg_match2 : function (re : VALUE) : VALUE; cdecl;
  rb_reg_match_last : function (match : VALUE) : VALUE; cdecl;
  rb_reg_match_post : function (match : VALUE) : VALUE; cdecl;
  rb_reg_match_pre : function (match : VALUE) : VALUE; cdecl;
  rb_reg_new : function (s : PChar; len : clong; options : cint) : VALUE; cdecl;
  rb_reg_new_str : function (s : VALUE; options : cint) : VALUE; cdecl;
  rb_reg_nth_defined : function (nth : cint; match : VALUE) : VALUE; cdecl;
  rb_reg_nth_match : function (nth : cint; match : VALUE) : VALUE; cdecl;
  rb_reg_options : function (re : VALUE) : cint; cdecl;
  rb_reg_prepare_re : function (re, str : VALUE) : Pointer; cdecl;
  rb_reg_quote : function (str : VALUE) : VALUE; cdecl;
  rb_reg_regcomp : function (str : VALUE) : VALUE; cdecl;
  rb_reg_regsub : function (str, src : VALUE; regs : Pointer; regexp : VALUE) : VALUE; cdecl;
  rb_reg_search : function (re, str : VALUE; pos : clong; reverse : cint) : clong; cdecl;
  rb_remove_event_hook : function (func : rb_event_hook_func_t) : cint; cdecl;
  rb_remove_method : procedure (klass : VALUE; name : PChar); cdecl;
  rb_remove_method_id : procedure (klass : VALUE; mid : ID); cdecl;
  rb_require : function (fname : PChar) : VALUE; cdecl;
  rb_require_safe : function (fname : VALUE; safe : cint) : VALUE; cdecl;
  rb_rescue : function (b_proc : Pointer; data1 : VALUE; r_proc : Pointer; data2 : VALUE) : VALUE; cdecl;
  rb_rescue2 : function (b_proc : Pointer; data1 : VALUE; r_proc : Pointer; data2 : VALUE) : VALUE; varargs; cdecl;
  rb_reserved_fd_p : function (fd : cint) : cint; cdecl;
  rb_reserved_word : function (str : PChar; len : cuint) : Pointer; cdecl;
  rb_reset_coverages : procedure (); cdecl;
  rb_reset_random_seed : procedure (); cdecl;
  rb_respond_to : function (obj : VALUE; id : ID) : cint; cdecl;
  rb_ruby_debug_ptr : function () : Pointer; cdecl;
  rb_ruby_verbose_ptr : function () : Pointer; cdecl;
  rb_run_exec_options : function (e, s : Pointer) : cint; cdecl;
  rb_run_exec_options_err : function (e, s : Pointer; errmsg : PChar; errmsg_buflen : csize_t) : cint; cdecl;
  rb_safe_level : function () : cint; cdecl;
  rb_scan_args : function (argc : cint; argv : PVALUE; fmt : PChar) : cint; varargs; cdecl;
  rb_secure : procedure (level : cint); cdecl;
  rb_secure_update : procedure (obj : VALUE); cdecl;
  rb_set_class_path : procedure (klass, under : VALUE; name : PChar); cdecl;
  rb_set_class_path_string : procedure (klass, under, name : VALUE); cdecl;
  rb_set_coverages : procedure (coverages : VALUE); cdecl;
  rb_set_end_proc : procedure (func : p_end_proc; data : VALUE); cdecl;
  rb_set_errinfo : procedure (err : VALUE); cdecl;
  rb_set_safe_level : procedure (level : cint); cdecl;
  rb_set_safe_level_force : procedure (safe : cint); cdecl;
  rb_singleton_class : function (obj : VALUE) : VALUE; cdecl;
  rb_singleton_class_attached : procedure (klass, obj : VALUE); cdecl;
  rb_singleton_class_clone : function (obj : VALUE) : VALUE; cdecl;
  rb_sourcefile : function () : PChar; cdecl;
  rb_sourceline : function () : cint; cdecl;
  rb_spawn : function (argc : cint; argv : PVALUE) : PtrUInt; cdecl;
  rb_spawn_err : function (argc : cint; argv : PVALUE; errmsg : PChar; errmsg_buflen : csize_t) : PtrUInt; cdecl;
  rb_sprintf : function (format : PChar) : VALUE; varargs; cdecl;
  rb_str2inum : function (str : VALUE; base : cint) : VALUE; cdecl;
  rb_str_append : function (str, str2 : VALUE) : VALUE; cdecl;
  rb_str_associate : procedure (str, add : VALUE); cdecl;
  rb_str_associated : function (str : VALUE) : VALUE; cdecl;
  rb_str_buf_append : function (str, str2 : VALUE) : VALUE; cdecl;
  rb_str_buf_cat : function (str : VALUE; ptr : PChar; len : clong) : VALUE; cdecl;
  rb_str_buf_cat2 : function (str : VALUE; ptr : PChar) : VALUE; cdecl;
  rb_str_buf_cat_ascii : function (str : VALUE; ptr : PChar) : VALUE; cdecl;
  rb_str_buf_new : function (capa : clong) : VALUE; cdecl;
  rb_str_buf_new2 : function (ptr : PChar) : VALUE; cdecl;
  rb_str_buf_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_str_capacity : function (str : VALUE) : csize_t; cdecl;
  rb_str_cat : function (str : VALUE; ptr : PChar; len : clong) : VALUE; cdecl;
  rb_str_cat2 : function (str : VALUE; ptr : PChar) : VALUE; cdecl;
  rb_str_catf : function (str : VALUE; format : PChar) : VALUE; varargs; cdecl;
  rb_str_cmp : function (str1, str2 : VALUE) : cint; cdecl;
  rb_str_coderange_scan_restartable : function (s, e : PChar; enc : Pointer; cr : pcint) : clong; cdecl;
  rb_str_comparable : function (str1, str2 : VALUE) : cint; cdecl;
  rb_str_concat : function (str1, str2 : VALUE) : VALUE; cdecl;
  rb_str_conv_enc : function (str : VALUE; from, _to : Pointer) : VALUE; cdecl;
  rb_str_conv_enc_opts : function (str : VALUE; from, _to : Pointer; ecflags : cint; ecopts : VALUE) : VALUE; cdecl;
  rb_str_drop_bytes : function (str : VALUE; len : clong) : VALUE; cdecl;
  rb_str_dump : function (str : VALUE) : VALUE; cdecl;
  rb_str_dup : function (str : VALUE) : VALUE; cdecl;
  rb_str_dup_frozen : function (str : VALUE) : VALUE; cdecl;
  rb_str_ellipsize : function (str : VALUE; len : clong) : VALUE; cdecl;
  rb_str_encode : function (str, _to : VALUE; ecflags : cint; ecopts : VALUE) : VALUE; cdecl;
  rb_str_encode_ospath : function (path : VALUE) : VALUE; cdecl;
  rb_str_equal : function (str1, str2 : VALUE) : VALUE; cdecl;
  rb_str_export : function (str : VALUE) : VALUE; cdecl;
  rb_str_export_locale : function (str : VALUE) : VALUE; cdecl;
  rb_str_export_to_enc : function (str : VALUE; enc : Pointer) : VALUE; cdecl;
  rb_str_format : function (argc : cint; argv : PVALUE; fmt : VALUE) : VALUE; cdecl;
  rb_str_free : procedure (str : VALUE); cdecl;
  rb_str_freeze : function (str : VALUE) : VALUE; cdecl;
  rb_str_hash : function (str : VALUE) : st_index_t; cdecl;
  rb_str_hash_cmp : function (str1, str2 : VALUE) : cint; cdecl;
  rb_String : function (val : VALUE) : VALUE; cdecl;
  rb_string_value : function (ptr : PVALUE) : VALUE; cdecl;
  rb_string_value_cstr : function (ptr : PVALUE) : PChar; cdecl;
  rb_string_value_ptr : function (ptr : PVALUE) : PChar; cdecl;
  rb_str_inspect : function (str : VALUE) : VALUE; cdecl;
  rb_str_intern : function (s : VALUE) : VALUE; cdecl;
  rb_str_length : function (str : VALUE) : VALUE; cdecl;
  rb_str_locktmp : function (str : VALUE) : VALUE; cdecl;
  rb_str_memsize : function (str : VALUE) : csize_t; cdecl;
  rb_str_modify : procedure (str : VALUE); cdecl;
  rb_str_modify_expand : procedure (str : VALUE; expand : clong); cdecl;
  rb_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_str_new2 : function (ptr : PChar) : VALUE; cdecl;
  rb_str_new3 : function (str : VALUE) : VALUE; cdecl;
  rb_str_new4 : function (orig : VALUE) : VALUE; cdecl;
  rb_str_new5 : function (klass : VALUE; ptr : PChar; len : clong) : VALUE; cdecl;
  rb_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_str_new_frozen : function (orig : VALUE) : VALUE; cdecl;
  rb_str_new_shared : function (str : VALUE) : VALUE; cdecl;
  rb_str_new_with_class : function (klass : VALUE; ptr : PChar; len : clong) : VALUE; cdecl;
  rb_str_offset : function (str : VALUE; pos : clong) : clong; cdecl;
  rb_str_plus : function (str1, str2 : VALUE) : VALUE; cdecl;
  rb_str_replace : function (str, str2 : VALUE) : VALUE; cdecl;
  rb_str_resize : function (str : VALUE; len : clong) : VALUE; cdecl;
  rb_str_resurrect : function (str : VALUE) : VALUE; cdecl;
  rb_str_set_len : procedure (str : VALUE; len : clong); cdecl;
  rb_str_setter : procedure (val : VALUE; id : ID; _var : PVALUE); cdecl;
  rb_str_shared_replace : procedure (str, str2 : VALUE); cdecl;
  rb_str_split : function (str : VALUE; sep0 : PChar) : VALUE; cdecl;
  rb_str_strlen : function (str : VALUE) : clong; cdecl;
  rb_str_sublen : function (str : VALUE; pos : clong) : clong; cdecl;
  rb_str_subseq : function (str : VALUE; beg, len : clong) : VALUE; cdecl;
  rb_str_substr : function (str : VALUE; beg, len : clong) : VALUE; cdecl;
  rb_str_succ : function (orig : VALUE) : VALUE; cdecl;
  rb_str_times : function (str, times : VALUE) : VALUE; cdecl;
  rb_str_tmp_new : function (len : clong) : VALUE; cdecl;
  rb_str_to_dbl : function (str : VALUE; badcheck : cint) : cdouble; cdecl;
  rb_str_to_inum : function (str : VALUE; base, badcheck : cint) : VALUE; cdecl;
  rb_str_to_str : function (str : VALUE) : VALUE; cdecl;
  rb_struct_alloc : function (klass, values : VALUE) : VALUE; cdecl;
  rb_struct_alloc_noinit : function (klass : VALUE) : VALUE; cdecl;
  rb_struct_aref : function (s, idx : VALUE) : VALUE; cdecl;
  rb_struct_aset : function (s, idx, val : VALUE) : VALUE; cdecl;
  rb_struct_define : function (name : PChar) : VALUE; varargs; cdecl;
  rb_struct_define_without_accessor : function (class_name : PChar; super : VALUE; alloc : rb_alloc_func_t) : VALUE; varargs; cdecl;
  rb_struct_getmember : function (obj : VALUE; id : ID) : VALUE; cdecl;
  rb_struct_initialize : function (_self, values : VALUE) : VALUE; cdecl;
  rb_struct_iv_get : function (c : VALUE; name : PChar) : VALUE; cdecl;
  rb_struct_members : function (s : VALUE) : VALUE; cdecl;
  rb_struct_new : function (klass : VALUE) : VALUE; varargs; cdecl;
  rb_struct_s_members : function (klass : VALUE) : VALUE; cdecl;
  rb_str_unlocktmp : function (str : VALUE) : VALUE; cdecl;
  rb_str_update : procedure (str : VALUE; beg, len : clong; val : VALUE); cdecl;
  rb_sym_all_symbols : function () : VALUE; cdecl;
  rb_symname_p : function (name : PChar) : cint; cdecl;
  rb_sym_to_s : function (sym : VALUE) : VALUE; cdecl;
  rb_syserr_fail : procedure (e : cint; mesg : PChar); cdecl;
  rb_syserr_fail_str : procedure (e : cint; mesg : VALUE); cdecl;
  rb_syserr_new : function (n : cint; mesg : PChar) : VALUE; cdecl;
  rb_syserr_new_str : function (n : cint; arg : VALUE) : VALUE; cdecl;
  rb_sys_fail : procedure (mesg : PChar); cdecl;
  rb_sys_fail_str : procedure (mesg : VALUE); cdecl;
  rb_syswait : procedure (pid : PtrUInt); cdecl;
  rb_sys_warning : procedure (fmt : PChar); varargs; cdecl;
  rb_tainted_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_tainted_str_new2 : function (ptr : PChar) : VALUE; cdecl;
  rb_tainted_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_thread_alone : function () : cint; cdecl;
  rb_thread_atfork : procedure (); cdecl;
  rb_thread_atfork_before_exec : procedure (); cdecl;
  rb_thread_blocking_region : function (func : rb_blocking_function_t; data1 : Pointer; ubf : rb_unblock_function_t; data2 : Pointer) : VALUE; cdecl;
  rb_thread_call_with_gvl : function (func : p_gvl_func; data1 : Pointer) : Pointer; cdecl;
  rb_thread_call_without_gvl : function (func : rb_blocking_function_t; data1 : Pointer; ubf : rb_unblock_function_t; data2 : Pointer) : VALUE; cdecl;
  rb_thread_check_ints : procedure (); cdecl;
  rb_thread_check_trap_pending : function () : cint; cdecl;
  rb_thread_create : function (fn, arg : Pointer) : VALUE; cdecl;
  rb_thread_current : function () : VALUE; cdecl;
  rb_thread_fd_close : procedure (fd : cint); cdecl;
  rb_thread_fd_select : function (max : cint; read, write, _except : Pointer; timeout : ptimeval) : cint; cdecl;
  rb_thread_fd_writable : function (fd : cint) : cint; cdecl;
  rb_thread_interrupted : function (thval : VALUE) : cint; cdecl;
  rb_thread_io_blocking_region : function (func : rb_blocking_function_t; data1 : Pointer; fd : cint) : VALUE; cdecl;
  rb_thread_kill : function (thread : VALUE) : VALUE; cdecl;
  rb_thread_local_aref : function (thread : VALUE; id : ID) : VALUE; cdecl;
  rb_thread_local_aset : function (thread : VALUE; id : ID; val : VALUE) : VALUE; cdecl;
  rb_thread_main : function () : VALUE; cdecl;
  rb_thread_polling : procedure (); cdecl;
  rb_thread_run : function (thread : VALUE) : VALUE; cdecl;
  rb_thread_schedule : procedure (); cdecl;
  rb_thread_select : function (max : cint; read, write, _except : Pointer; timeout : ptimeval) : cint; cdecl;
  rb_thread_sleep : procedure (sec : cint); cdecl;
  rb_thread_sleep_forever : procedure (); cdecl;
  rb_thread_stop : function () : VALUE; cdecl;
  rb_thread_wait_fd : procedure (fd : cint); cdecl;
  rb_thread_wait_for : procedure (time : timeval); cdecl;
  rb_thread_wakeup : function (thread : VALUE) : VALUE; cdecl;
  rb_thread_wakeup_alive : function (thread : VALUE) : VALUE; cdecl;
  rb_throw : procedure (tag : PChar; val : VALUE); cdecl;
  rb_throw_obj : procedure (tag, val : VALUE); cdecl;
  rb_time_interval : function (num : VALUE) : timeval; cdecl;
  rb_time_nano_new : function (sec : time_t; nsec : clong) : VALUE; cdecl;
  rb_time_new : function (sec : time_t; usec : clong) : VALUE; cdecl;
  rb_time_num_new : function (timev, off : VALUE) : VALUE; cdecl;
  rb_time_succ : function (time : VALUE) : VALUE; cdecl;
  rb_time_timespec : function (time : VALUE) : timespec; cdecl;
  rb_time_timeval : function (time : VALUE) : timeval; cdecl;
  rb_to_encoding : function (enc : VALUE) : Pointer; cdecl;
  rb_to_encoding_index : function (enc : VALUE) : cint; cdecl;
  rb_to_float : function (val : VALUE) : VALUE; cdecl;
  rb_to_id : function (name : VALUE) : ID; cdecl;
  rb_to_int : function (val : VALUE) : VALUE; cdecl;
  rb_tolower : function (c : cint) : cint; cdecl;
  rb_toupper : function (c : cint) : cint; cdecl;
  rb_trap_exit : procedure (); cdecl;
  rb_typeddata_inherited_p : function (child, parent : Pointer) : cint; cdecl;
  rb_typeddata_is_kind_of : function (obj : VALUE; data_type : Pointer) : cint; cdecl;
  rb_uint2big : function (n : PtrUInt) : VALUE; cdecl;
  rb_uint2inum : function (n : PtrUInt) : VALUE; cdecl;
  rb_ull2inum : function (n : culonglong) : VALUE; cdecl;
  rb_undef : procedure (klass : VALUE; id : ID); cdecl;
  rb_undef_alloc_func : procedure (klass : VALUE); cdecl;
  rb_undef_method : procedure (klass : VALUE; name : PChar); cdecl;
  rb_update_max_fd : procedure (fd : cint); cdecl;
  rb_usascii_encindex : function () : cint; cdecl;
  rb_usascii_encoding : function () : Pointer; cdecl;
  rb_usascii_str_new : function (ptr : PChar; len : clong) : VALUE; cdecl;
  rb_usascii_str_new2 : function (ptr : PChar) : VALUE; cdecl;
  rb_usascii_str_new_cstr : function (ptr : PChar) : VALUE; cdecl;
  rb_utf8_encindex : function () : cint; cdecl;
  rb_utf8_encoding : function () : Pointer; cdecl;
  rb_wait_for_single_fd : function (fd, events : cint; tv : ptimeval) : cint; cdecl;
  rb_waitpid : function (pid : PtrUInt; st : pcint; flags : cint) : PtrUInt; cdecl;
  rb_warn : procedure (fmt : PChar); varargs; cdecl;
  rb_warning : procedure (fmt : PChar); varargs; cdecl;
  rb_write_error : procedure (mesg : PChar); cdecl;
  rb_write_error2 : procedure (mesg : PChar; len : clong); cdecl;
  rb_yield : function (val : VALUE) : VALUE; cdecl;
  rb_yield_splat : function (values : VALUE) : VALUE; cdecl;
  rb_yield_values : function (n : cint) : VALUE; varargs; cdecl;
  rb_yield_values2 : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  ruby_brace_glob : function (str : PChar; flags : cint; func : ruby_glob_func; arg : VALUE) : cint; cdecl;
  ruby_cleanup : function (ex : cint) : cint; cdecl;
  ruby_debug_breakpoint : procedure (); cdecl;
  ruby_debug_print_id : function (level, debug_level : cint; header : PChar; id : ID) : ID; cdecl;
  ruby_debug_print_indent : function ( level, debug_level, indent_level : cint) : cint; cdecl;
  ruby_debug_print_node : function (level, debug_level : cint; header : PChar; node : Pointer) : Pointer; cdecl;
  ruby_debug_print_value : function (level, debug_level : cint; header : PChar; obj : VALUE) : VALUE; cdecl;
  ruby_default_signal : procedure (sig : cint); cdecl;
  ruby_each_words : procedure (str : PChar; func : p_each_words_func; arg : Pointer); cdecl;
  ruby_enc_find_basename : function (name : PChar; baselen, alllen : pclong; enc : Pointer) : PChar; cdecl;
  ruby_enc_find_extname : function (name : PChar; len : pclong; enc : Pointer) : PChar; cdecl;
  ruby_exec_node : function (n : Pointer) : cint; cdecl;
  ruby_executable_node : function (n : Pointer; status : pcint) : cint; cdecl;
  ruby_finalize : procedure (); cdecl;
  ruby_getcwd : function () : PChar; cdecl;
  ruby_glob : function (path : PChar; flags : cint; func : ruby_glob_func; arg : VALUE) : cint; cdecl;
  ruby_incpush : procedure (path : PChar); cdecl;
  ruby_init : procedure (); cdecl;
  ruby_Init_Continuation_body : procedure (); cdecl;
  ruby_init_ext : procedure (name : PChar; init : p_init_ext_func); cdecl;
  ruby_Init_Fiber_as_Coroutine : procedure (); cdecl;
  ruby_init_loadpath : procedure (); cdecl;
  ruby_init_stack : procedure (addr : PVALUE); cdecl;
  ruby_native_thread_p : function () : cint; cdecl;
  ruby_node_name : function (node : cint) : PChar; cdecl;
  ruby_options : function (argc : cint; argv : PPChar) : Pointer; cdecl;
  ruby_process_options : function (argc : cint; argv : PPChar) : Pointer; cdecl;
  ruby_prog_init : procedure (); cdecl;
  ruby_qsort : procedure (base : Pointer; nel, size : csize_t; cmp : p_cmp_func; d : Pointer); cdecl;
  ruby_run_node : function (n : Pointer) : cint; cdecl;
  ruby_scan_hex : function (start : PChar; len : csize_t; retlen : pcsize_t) : culong; cdecl;
  ruby_scan_oct : function (start : PChar; len : csize_t; retlen : pcsize_t) : culong; cdecl;
  ruby_script : procedure (name : PChar); cdecl;
  ruby_set_argv : procedure (argc : cint; argv : PPChar); cdecl;
  ruby_set_debug_option : procedure (str : PChar; len : cint; arg : Pointer); cdecl;
  ruby_setenv : procedure (name, value : PChar); cdecl;
  ruby_show_copyright : procedure (); cdecl;
  ruby_show_version : procedure (); cdecl;
  ruby_sig_finalize : procedure (); cdecl;
  ruby_signal_name : function (no : cint) : PChar; cdecl;
  ruby_snprintf : function (str : PChar; n : csize_t; fmt : PChar) : cint; varargs; cdecl;
  ruby_stack_check : function () : cint; cdecl;
  ruby_stack_length : function (p : PPVALUE) : csize_t; cdecl;
  ruby_stop : procedure (ex : cint); cdecl;
  ruby_strdup : function (str : PChar) : PChar; cdecl;
  ruby_strtod : function (s00 : PChar; se : PPChar) : cdouble; cdecl;
  ruby_strtoul : function (str : PChar; endptr : PPChar; base : cint) : culong; cdecl;
  ruby_sysinit : procedure (argc : pcint; argv : PPPChar); cdecl;
  ruby_unsetenv : procedure (name : PChar); cdecl;
  ruby_vm_at_exit : procedure (func : p_at_exit); cdecl;
  ruby_vm_destruct : function (vm : Pointer) : cint; cdecl;
  ruby_xcalloc : function (n, size : csize_t) : Pointer; cdecl;
  ruby_xfree : procedure (x : Pointer); cdecl;
  ruby_xmalloc : function (size : csize_t) : Pointer; cdecl;
  ruby_xmalloc2 : function (n, size : csize_t) : Pointer; cdecl;
  ruby_xrealloc : function (ptr : Pointer; size : csize_t) : Pointer; cdecl;
  ruby_xrealloc2 : function (ptr : Pointer; n, size : csize_t) : Pointer; cdecl;

var
  rb_infinity : VALUE;
  rb_nan      : VALUE;

var
  rb_barrier_destroy : function (_self : VALUE) : VALUE; cdecl;
  rb_barrier_new : function () : VALUE; cdecl;
  rb_barrier_release : function (_self : VALUE) : VALUE; cdecl;
  rb_barrier_wait : function (_self : VALUE) : VALUE; cdecl;
  rb_disable_interrupt : procedure (); cdecl;
  rb_enable_interrupt : procedure (); cdecl;
  rb_file_const : procedure (name : PChar; value : VALUE); cdecl;
  rb_file_load_ok : function (path : PChar) : cint; cdecl;
  rb_gc_mark_parser : procedure (); cdecl;
  rb_gc_mark_symbols : procedure (); cdecl;
  rb_gc_mark_threads : procedure (); cdecl;
  rb_load_fail : procedure (path : PChar); cdecl;
  rb_mark_end_proc : procedure (); cdecl;
  rb_vm_get_sourceline : function (cfp : Pointer) : cint; cdecl;
  rb_vm_make_env_object : function (th, cfp : Pointer) : VALUE; cdecl;

var
  ruby_global_name_punct_bits : array [0..2] of cuint;

var
  rb_funcall_with_block : function (recv : VALUE; mid : ID; argc : cint; argv : PVALUE; pass_procval : VALUE) : VALUE; cdecl;
  rb_method_call_with_block : function (argc : cint; argv : PVALUE; method, pass_procval : VALUE) : VALUE; cdecl;
  rb_ary_rotate : function (ary : VALUE; cnt : clong) : VALUE; cdecl;
  rb_ary_shared_with_p : function (ary1, ary2 : VALUE) : VALUE; cdecl;
  rb_check_copyable : procedure (obj, orig : VALUE); cdecl;
  rb_check_id : function (namep : PVALUE) : ID; cdecl;
  rb_check_id_cstr : function (ptr : PChar; len : clong; enc : Pointer) : ID; cdecl;
  rb_check_to_int : function (val : VALUE) : VALUE; cdecl;
  rb_check_trusted : procedure (obj : VALUE); cdecl;
  rb_cloexec_dup : function (oldfd : cint) : cint; cdecl;
  rb_cloexec_dup2 : function (oldfd, newfd : cint) : cint; cdecl;
  rb_cloexec_fcntl_dupfd : function (fd, minfd : cint) : cint; cdecl;
  rb_cloexec_open : function (pathname : PChar; flags, mode : cint) : cint; cdecl;
  rb_debug_inspector_backtrace_locations : function (dc : Pointer) : VALUE; cdecl;
  rb_debug_inspector_frame_binding_get : function (dc : Pointer; index : clong) : VALUE; cdecl;
  rb_debug_inspector_frame_class_get : function (dc : Pointer; index : clong) : VALUE; cdecl;
  rb_debug_inspector_frame_iseq_get : function (dc : Pointer; index : clong) : VALUE; cdecl;
  rb_debug_inspector_frame_self_get : function (dc : Pointer; index : clong) : VALUE; cdecl;
  rb_debug_inspector_open : function (func : rb_debug_inspector_func_t; data : Pointer) : VALUE; cdecl;
  rb_encdb_set_unicode : procedure (index : cint); cdecl;
  rb_enc_raise : procedure (enc : Pointer; exc : VALUE; fmt : PChar); varargs; cdecl;
  rb_enumeratorize_with_size : function (obj, meth : VALUE; argc : cint; argv : PVALUE; size_fn : Pointer) : VALUE; cdecl;
  rb_enum_values_pack : function (argc : cint; argv : PVALUE) : VALUE; cdecl;
  rb_error_arity : procedure (argc, min, max : cint); cdecl;
  rb_error_untrusted : procedure (obj : VALUE); cdecl;
  rb_execarg_addopt : function (execarg_obj, key, val : VALUE) : cint; cdecl;
  rb_execarg_extract_options : function (execarg_obj, opthash : VALUE) : VALUE; cdecl;
  rb_execarg_fixup : procedure (execarg_obj : VALUE); cdecl;
  rb_execarg_get : function (execarg_obj : VALUE) : Pointer; cdecl;
  rb_execarg_init : function (argc : cint; argv : PVALUE; accept_shell : cint; execarg_obj : VALUE) : VALUE; cdecl;
  rb_execarg_new : function (argc : cint; argv : PVALUE; accept_shell : cint) : VALUE; cdecl;
  rb_execarg_run_options : function (eargp, sargp : Pointer; errmsg : PChar; errmsg_buflen : csize_t) : cint; cdecl;
  rb_execarg_setenv : procedure (execarg, env : VALUE); cdecl;
  rb_exec_async_signal_safe : function (eargp : Pointer; errmsg : PChar; errmsg_buflen : csize_t) : cint; cdecl;
  rb_fd_fix_cloexec : procedure (fd : cint); cdecl;
  rb_find_encoding : function (enc : VALUE) : Pointer; cdecl;
  rb_fix2short : function (val : VALUE) : cshort; cdecl;
  rb_fix2ushort : function (val : VALUE) : cushort; cdecl;
  rb_fork_async_signal_safe : function (status : pcint; chfunc : p_chfunc_msg; charg : Pointer; fds : VALUE; errmsg : PChar; errmsg_buflen : csize_t) : PtrUInt; cdecl;
  rb__Hash : function (val : VALUE) : VALUE; cdecl;
  rb_hash_clear : function (hash : VALUE) : VALUE; cdecl;
  rb_include_class_new : function (module, super : VALUE) : VALUE; cdecl;
  rb_io_check_io : function (io : VALUE) : VALUE; cdecl;
  rb_is_attrset_id : function (id : ID) : cint; cdecl;
  rb_iseq_compile_on_base : function (src, _file, line : VALUE; base_block : Pointer) : VALUE; cdecl;
  rb_iseq_line_no : function (iseq : Pointer; pos : csize_t) : cuint; cdecl;
  rb_iseq_line_trace_all : function (iseqval : VALUE) : VALUE; cdecl;
  rb_iseq_line_trace_each : function (iseqval : VALUE; func : p_iseq_line_trace_func; data : Pointer) : cint; cdecl;
  rb_iseq_line_trace_specify : function (iseqval, pos, _set : VALUE) : VALUE; cdecl;
  rb_is_global_id : function (id : ID) : cint; cdecl;
  rb_iter_break_value : procedure (val : VALUE); cdecl;
  rb_loaderror_with_path : procedure (path : VALUE; fmt : PChar); varargs; cdecl;
  rb_maygvl_fd_fix_cloexec : procedure (fd : cint); cdecl;
  rb_must_asciicompat : procedure (str : VALUE); cdecl;
  rb_name_error_str : procedure (str : VALUE; fmt : PChar); varargs; cdecl;
  rb_newobj_of : function (klass, flags : VALUE) : VALUE; cdecl;
  rb_num2short : function (val : VALUE) : cshort; cdecl;
  rb_num2ushort : function (val : VALUE) : cushort; cdecl;
  rb_num_coerce_bit : function (x, y : VALUE; func : ID) : VALUE; cdecl;
  rb_objspace_internal_object_p : function (obj : VALUE) : cint; cdecl;
  rb_objspace_markable_object_p : function (obj : VALUE) : cint; cdecl;
  rb_objspace_reachable_objects_from : procedure (obj : VALUE; func : p_reachable_objects_func; data : Pointer); cdecl;
  rb_prepend_module : procedure (klass, module : VALUE); cdecl;
  rb_random_ulong_limited : function (obj : VALUE; limit : culong) : culong; cdecl;
  rb_remove_event_hook_with_data : function (func : rb_event_hook_func_t; data : VALUE) : cint; cdecl;
  rb_thread_add_event_hook : procedure (thval : VALUE; func : rb_event_hook_func_t; flags : rb_event_flag_t; data : VALUE); cdecl;
  rb_thread_call_without_gvl2 : function (func : p_gvl_func; data1 : Pointer; ubf : rb_unblock_function_t; data2 : Pointer) : Pointer; cdecl;
  rb_thread_remove_event_hook : function (thval : VALUE; func : rb_event_hook_func_t) : cint; cdecl;
  rb_thread_remove_event_hook_with_data : function (thval : VALUE; func : rb_event_hook_func_t; data : VALUE) : cint; cdecl;
  rb_tracearg_binding : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_defined_class : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_event : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_from_tracepoint : function (tpval : VALUE) : Pointer; cdecl;
  rb_tracearg_lineno : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_method_id : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_path : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_raised_exception : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_return_value : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracearg_self : function (trace_arg : Pointer) : VALUE; cdecl;
  rb_tracepoint_disable : function (tpval : VALUE) : VALUE; cdecl;
  rb_tracepoint_enable : function (tpval : VALUE) : VALUE; cdecl;
  rb_tracepoint_enabled_p : function (tpval : VALUE) : VALUE; cdecl;
  rb_tracepoint_new : function (target_thval : VALUE; events : rb_event_flag_t; func : p_reachable_objects_func; data : Pointer) : VALUE; cdecl;
  ruby_set_script_name : procedure (name : VALUE); cdecl;
  ruby_setup : function () : cint; cdecl;

var
  p_rb_float_new : p_double_constructor;


